# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: validation

on: 
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_and_validate:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
          - {
            name: "windows",
            os: windows-latest,
            artifact: "bng_windows_cygwin.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          # - {
          #   name: "linux",
          #   os: ubuntu-latest,
          #   artifact: "bng_ubuntu_gcc.7z",
          #   build_type: "Release",
          #   cc: "gcc",
          #   cxx: "g++",
          #   archiver: "7z a",
          #   generators: "Ninja"
          # }
          # - {
          #   name: "mac",
          #   os: macos-latest,
          #   artifact: "bng_macos_clang.7z",
          #   build_type: "Release",
          #   cc: "clang",
          #   cxx: "clang++",
          #   archiver: "7za a",
          #   generators: "Ninja"
          # }
    steps:
      - name: Checkout repo and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      # Windows setup
      - name: Set up Cygwin
        if: startsWith(matrix.config.os, 'windows') 
        uses: egor-tensin/setup-cygwin@v4
        with:
          packages: cmake gcc-g++ autoconf automake libtool dos2unix pkg-config make
      - name: Setup ninja on windows
        if: startsWith(matrix.config.os, 'windows') 
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Setup windows and untar libs
        if: startsWith(matrix.config.os, 'windows')
        working-directory: ./bng2
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          cd /cygdrive/d/a/bionetgen/bionetgen/bng2/Network3
          mkdir m4
          dos2unix configure.ac Makefile.am Makefile.cmake
          tar xvfz ../libsource/cvode-2.6.0.tar.gz
          tar xvfz ../libsource/muparser_v2_2_4.tar.gz
      # Unix setup
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install cmake
          cmake --version
          gcc --version
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'mac')
        # also install p7zip if we are achiving
        run: |
          brew install cmake 
          cmake --version
      # look at environment variables for debugging
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      # Unix compilation
      - name: Make-unix
        if: ${{ startsWith(matrix.config.name, 'mac') || startsWith(matrix.config.name, 'linux') }}
        shell: bash
        working-directory: ./bng2
        run: |
          make
      # Windows compilation
      - name: Make-network-windows
        if: startsWith(matrix.config.name, 'windows') 
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          cd /cygdrive/d/a/bionetgen/bionetgen/bng2
          export _BNGPATH=$PWD
          cd Network3
          autoreconf --no-recursive --install
          ./configure --disable-shared --prefix=${_BNGPATH}
          make
          ls ../
          ls ../bin
          cp run_network.exe ../bin/.

      # - name: Make-nfsim-windows
      #   if: startsWith(matrix.config.name, 'windows') 
      #   working-directory: ./bng2
      #   run: | 
      #     echo $PWD
      #     mkdir nfsim_src/build
      #     cd nfsim_src/build
      #     cmake -G "Ninja" ..
      #     ls
      #     ninja
      #     cp NFsim ../../bin/.
      # - name: Make-nfsim-unix
      #   if: ${{ startsWith(matrix.config.name, 'mac') || startsWith(matrix.config.name, 'linux') }} 
      #   working-directory: ./bng2
      #   run: | 
      #     mkdir nfsim_src/build
      #     cd nfsim_src/build
      #     cmake --build ${{github.workspace}}/bng2/nfsim_src/build --config ${{env.BUILD_TYPE}}

      # now everything is compiled, we validate
      # windows validation
      - name: validate
        if: startsWith(matrix.config.name, 'windows')
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          cd /cygdrive/d/a/bionetgen/bionetgen/bng2/Validate
          perl validate_examples.pl
      # unix validation
      - name: validate
        if: ${{ startsWith(matrix.config.name, 'mac') || startsWith(matrix.config.name, 'linux') }}
        shell: bash
        working-directory: ./bng2/Validate
        run: |
          perl validate_examples.pl
            
      # - name: Prepare unix bundle
      #   if: matrix.os != 'windows-latest'
      #   run: |
      #     cd 
      #     mkdir ${{github.workspace}}/bundle_${{ matrix.os }}
      #     cp ${{github.workspace}}/build/NFsim ${{github.workspace}}/bundle_${{ matrix.os }}/.
      # - name: Prepare windows bundle
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     cd 
      #     mkdir ${{github.workspace}}/bundle_${{ matrix.os }}
      #     cp ${{github.workspace}}/build/NFsim.exe ${{github.workspace}}/bundle_${{ matrix.os }}/.        
      #     cp ${{github.workspace}}/build/*.dll ${{github.workspace}}/bundle_${{ matrix.os }}/.
      # - name: Archive compiled NFsim
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: NFsim_bin_${{ matrix.os }}
      #     path: ${{github.workspace}}/bundle_${{ matrix.os }}
